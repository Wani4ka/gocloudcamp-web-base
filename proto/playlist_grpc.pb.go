// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: playlist.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlaylistClient is the client API for Playlist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistClient interface {
	AddSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*SongLocation, error)
	UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSong(ctx context.Context, in *SongLocation, opts ...grpc.CallOption) (*Song, error)
	DeleteSong(ctx context.Context, in *SongLocation, opts ...grpc.CallOption) (*Song, error)
}

type playlistClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistClient(cc grpc.ClientConnInterface) PlaylistClient {
	return &playlistClient{cc}
}

func (c *playlistClient) AddSong(ctx context.Context, in *Song, opts ...grpc.CallOption) (*SongLocation, error) {
	out := new(SongLocation)
	err := c.cc.Invoke(ctx, "/Playlist/AddSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) UpdateSong(ctx context.Context, in *UpdateSongRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Playlist/UpdateSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) GetSong(ctx context.Context, in *SongLocation, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, "/Playlist/GetSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistClient) DeleteSong(ctx context.Context, in *SongLocation, opts ...grpc.CallOption) (*Song, error) {
	out := new(Song)
	err := c.cc.Invoke(ctx, "/Playlist/DeleteSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServer is the server API for Playlist service.
// All implementations must embed UnimplementedPlaylistServer
// for forward compatibility
type PlaylistServer interface {
	AddSong(context.Context, *Song) (*SongLocation, error)
	UpdateSong(context.Context, *UpdateSongRequest) (*emptypb.Empty, error)
	GetSong(context.Context, *SongLocation) (*Song, error)
	DeleteSong(context.Context, *SongLocation) (*Song, error)
	mustEmbedUnimplementedPlaylistServer()
}

// UnimplementedPlaylistServer must be embedded to have forward compatible implementations.
type UnimplementedPlaylistServer struct {
}

func (UnimplementedPlaylistServer) AddSong(context.Context, *Song) (*SongLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSong not implemented")
}
func (UnimplementedPlaylistServer) UpdateSong(context.Context, *UpdateSongRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSong not implemented")
}
func (UnimplementedPlaylistServer) GetSong(context.Context, *SongLocation) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSong not implemented")
}
func (UnimplementedPlaylistServer) DeleteSong(context.Context, *SongLocation) (*Song, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSong not implemented")
}
func (UnimplementedPlaylistServer) mustEmbedUnimplementedPlaylistServer() {}

// UnsafePlaylistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServer will
// result in compilation errors.
type UnsafePlaylistServer interface {
	mustEmbedUnimplementedPlaylistServer()
}

func RegisterPlaylistServer(s grpc.ServiceRegistrar, srv PlaylistServer) {
	s.RegisterService(&Playlist_ServiceDesc, srv)
}

func _Playlist_AddSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Song)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).AddSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Playlist/AddSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).AddSong(ctx, req.(*Song))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_UpdateSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).UpdateSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Playlist/UpdateSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).UpdateSong(ctx, req.(*UpdateSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_GetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).GetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Playlist/GetSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).GetSong(ctx, req.(*SongLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Playlist_DeleteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SongLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServer).DeleteSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Playlist/DeleteSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServer).DeleteSong(ctx, req.(*SongLocation))
	}
	return interceptor(ctx, in, info, handler)
}

// Playlist_ServiceDesc is the grpc.ServiceDesc for Playlist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Playlist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Playlist",
	HandlerType: (*PlaylistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSong",
			Handler:    _Playlist_AddSong_Handler,
		},
		{
			MethodName: "UpdateSong",
			Handler:    _Playlist_UpdateSong_Handler,
		},
		{
			MethodName: "GetSong",
			Handler:    _Playlist_GetSong_Handler,
		},
		{
			MethodName: "DeleteSong",
			Handler:    _Playlist_DeleteSong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist.proto",
}
